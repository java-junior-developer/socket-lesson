package study.socket.common;

import study.socket.common.commands.AllComands;
import study.socket.common.commands.Command;

import java.io.IOException;
import java.net.Socket;
import java.util.concurrent.CopyOnWriteArraySet;



public class CreateHandler implements Runnable {
    private ConnectionService conn;
    AllComands commands;
    CopyOnWriteArraySet<ConnectionService> copyOnWriteArraySet;
    public CreateHandler(Socket socket,CopyOnWriteArraySet<ConnectionService> copyOnWriteArraySet) throws IOException {
        this.conn = new ConnectionService(socket);
        this.copyOnWriteArraySet=copyOnWriteArraySet;
        commands=new AllComands();

    }

    public ConnectionService getConnectionService() {
        return conn;
    }

    public void setConnectionService(ConnectionService connectionService) {
        this.conn = connectionService;
    }

    @Override
    public void run() {
        try {
            Message message =conn.readMessage();
            if (commands.getCommands().keySet().contains(message.getText())) {

                commands.getCommands().get(message.getText()).execute();

            } else if ("exit".equals(message.getText())) {
                return;
            }else{

                System.out.println(message.getText());}
            getMessageToAllClients(copyOnWriteArraySet,message);
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        try {
            conn.writeMessage(new Message("from server"));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

    }
    private void getMessageToAllClients( CopyOnWriteArraySet<ConnectionService> copyOnWriteArraySet,Message message) throws IOException {
        for (ConnectionService con: copyOnWriteArraySet){
            conn.writeMessage(message);
        }
    }


}
